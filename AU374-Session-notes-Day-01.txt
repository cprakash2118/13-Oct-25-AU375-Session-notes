# https://github.com/cprakash2118/13-Oct-25-AU375-Session-notes

# Timing details:-
  09:00 AM to 10:30 AM - Session01 
  10:30 AM to 10:45 AM - Tea Break 
  10:45 AM to 01:00 PM - Session02
  01:00 PM to 01:50 PM (+/- 5mins) - Lunch Break 
  01:55 PM to 03:30 PM - Session03
  03:30 PM to 03:45 PM - Tea Break 
  03:45 PM to 05:00 PM - Final Session of the day.  
  last 30 mins (LAB part)

---------------------------------------------------------------------------------

Point-01-# LAB/eBook access for AAPv25 (Ansible Automation Platform):-
- ROL - RedHat Online Learning 
- https://rol.redhat.com (Use Red Hat Login ID)
- Post successful login 
   - Dashboad and click on "Join" - AU374 - Developing Advanced Automation with Red Hat Ansible Automation Platform
   - Overview |LAB |Resources
   - Click on "Resources" then click on "Access BookSelf" - Access/Download eBook (AU374).
   - Click on "Lab" and access your lab. 
- Access "Workstation" node via console login (Click on "OPEN CONSOLE" and login.   

-----------------------------------------------------------------------------------
Point-02-#
- Product - Red Hat Ansible Automation Platform (AAPv25)
- Reference Links:-
  https://ansible.com 
  https://www.redhat.com/en/ansible-collaborative?intcmp=7015Y000003t7aWQAQ
  https://docs.ansible.com/
  
-----------------------------------------------------------------------------------
Point-03-#
- TOC (Table Of Conetents) - AU374 - AAPv25.
  Total 9 Units + Comprehensive Review
  Chapter 1. Developing Playbooks with Ansible Automation Platform 2
    - INtro to AAPv25
	- AAP via Git (Git Projects)
	- Recomm Best practics w.r.t AAP 
  Chapter 2. Managing Ansible Content Collections and Automation Execution Environments
    - Ansible Content Collections (find/install/use)
    - Automation Execution Environments (EE) - Use 
  Chapter 3. Running Playbooks with Automation Controller.
    - Ansible Automation Controller (Web based UI)
	- Running Playbooks via Ansible Controller.
  Chapter 4. Working with Ansible Configuration Settings
  Chapter 5. Managing Inventories (Static/Dynamic inventories).
  Chapter 6. Managing Task Execution
  Chapter 7. Transforming Data with Filters and Plug-ins
  Chapter 8. Coordinating Rolling Updates
  Chapter 9. Creating Ansible Content Collections and Automation Execution Environments  
 
- Classroom Environments:-
  User's Detail:-
    student/student  (sudo acces)
	root/redhat 
	devops/redhat    (passwordless authentication [ssh access]/Passworkless authorization (sudo access)
	
	workstation.lab.example.com [Jump]
	servera-f.lab.example.com   [Managed host]
	aap.lab.example.com         [Controller node]
	git.lab.example.com         [git server - Version Controlling]
	
- Access workstation node (as student user)
Custom LAB:-
$ whoami 
student 
$ mkdir work ; cd work 
$ pwd
/home/student/work 
$ touch inventory 
$ vim inventory
[prod]
server[a:d].lab.example.com 

[dev]
servere.lab.example.com 

[test]
serverf.lab.example.com 

$ cat inventory
 
- Use ansible (ansible ad-hoc commands)
$ ansible prod -i inventory --list-hosts 
$ ansible dev -i inventory --list-hosts 
$ ansible test -i inventory --list-hosts 

$ ansible all -i inventory --list-hosts 
$ ansible ungrouped -i inventory --list-hosts 

************ ungrouped concept 
$ vim inventory
server01.lab.example.com 
[prod]
server[a:d].lab.example.com 

[dev]
servere.lab.example.com 

[test]
serverf.lab.example.com 

$ ansible ungrouped -i inventory --list-hosts
server01.lab.example.com 

Note: remove "server01.lab.example.com" entry from inventory file.
**************


Let's execute few modules:-

$ ansible prod -i inventory -m ping  
$ ansible dev -i inventory -m command -a "uptime"   
$ ansible test -i inventory -m command -a "uptime ; echo -------------"  
Note: Above command not work as command module can only execute single command/program at a time.

$ ansible prod -i inventory -m shell -a "uptime ; echo ----------------"
$ ansible prod -i inventory -m user -a "name=john state=present"
$ ansible prod -i inventory -m shell -a "id john"

$ ansible prod -i inventory -m user -a "name=john state=absent"
$ ansible prod -i inventory -m shell -a "id john"


Module - ping/shell/user - built modules [Example ansible.builtin.user ]
