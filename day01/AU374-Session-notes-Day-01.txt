# https://github.com/cprakash2118/13-Oct-25-AU375-Session-notes

# Timing details:-
  09:00 AM to 10:30 AM - Session01 
  10:30 AM to 10:45 AM - Tea Break 
  10:45 AM to 01:00 PM - Session02
  01:00 PM to 01:50 PM (+/- 5mins) - Lunch Break 
  01:55 PM to 03:30 PM - Session03
  03:30 PM to 03:45 PM - Tea Break 
  03:45 PM to 05:00 PM - Final Session of the day.  
  last 30 mins (LAB part)

---------------------------------------------------------------------------------

Point-01-# LAB/eBook access for AAPv25 (Ansible Automation Platform):-
- ROL - RedHat Online Learning 
- https://rol.redhat.com (Use Red Hat Login ID)
- Post successful login 
   - Dashboad and click on "Join" - AU374 - Developing Advanced Automation with Red Hat Ansible Automation Platform
   - Overview |LAB |Resources
   - Click on "Resources" then click on "Access BookSelf" - Access/Download eBook (AU374).
   - Click on "Lab" and access your lab. 
- Access "Workstation" node via console login (Click on "OPEN CONSOLE" and login.   

-----------------------------------------------------------------------------------
Point-02-#
- Product - Red Hat Ansible Automation Platform (AAPv25)
- Reference Links:-
  https://ansible.com 
  https://www.redhat.com/en/ansible-collaborative?intcmp=7015Y000003t7aWQAQ
  https://docs.ansible.com/
  
-----------------------------------------------------------------------------------
Point-03-#
- TOC (Table Of Conetents) - AU374 - AAPv25.
  Total 9 Units + Comprehensive Review
  Chapter 1. Developing Playbooks with Ansible Automation Platform 2
    - INtro to AAPv25
	- AAP via Git (Git Projects)
	- Recomm Best practics w.r.t AAP 
  Chapter 2. Managing Ansible Content Collections and Automation Execution Environments
    - Ansible Content Collections (find/install/use)
    - Automation Execution Environments (EE) - Use 
  Chapter 3. Running Playbooks with Automation Controller.
    - Ansible Automation Controller (Web based UI)
	- Running Playbooks via Ansible Controller.
  Chapter 4. Working with Ansible Configuration Settings
  Chapter 5. Managing Inventories (Static/Dynamic inventories).
  Chapter 6. Managing Task Execution
  Chapter 7. Transforming Data with Filters and Plug-ins
  Chapter 8. Coordinating Rolling Updates
  Chapter 9. Creating Ansible Content Collections and Automation Execution Environments  
 
- Classroom Environments:-
  User's Detail:-
    student/student  (sudo acces)
	root/redhat 
	devops/redhat    (passwordless authentication [ssh access]/Passworkless authorization (sudo access)
	
	workstation.lab.example.com [Jump]
	servera-f.lab.example.com   [Managed host]
	aap.lab.example.com         [Controller node]
	git.lab.example.com         [git server - Version Controlling]
	
- Access workstation node (as student user)
**************** Custom LAB-01:- Start here ****************
$ whoami 
student 
$ mkdir work ; cd work 
$ pwd
/home/student/work 
$ touch inventory 
$ vim inventory
[prod]
server[a:d].lab.example.com 

[dev]
servere.lab.example.com 

[test]
serverf.lab.example.com 

$ cat inventory
 
- Use ansible (ansible ad-hoc commands)
$ ansible prod -i inventory --list-hosts 
$ ansible dev -i inventory --list-hosts 
$ ansible test -i inventory --list-hosts 

$ ansible all -i inventory --list-hosts 
$ ansible ungrouped -i inventory --list-hosts 

************ ungrouped concept 
$ vim inventory
server01.lab.example.com 
[prod]
server[a:d].lab.example.com 

[dev]
servere.lab.example.com 

[test]
serverf.lab.example.com 

$ ansible ungrouped -i inventory --list-hosts
server01.lab.example.com 

Note: remove "server01.lab.example.com" entry from inventory file.
**************


Let's execute few modules:-

$ ansible prod -i inventory -m ping  
$ ansible dev -i inventory -m command -a "uptime"   
$ ansible test -i inventory -m command -a "uptime ; echo -------------"  
Note: Above command not work as command module can only execute single command/program at a time.

$ ansible prod -i inventory -m shell -a "uptime ; echo ----------------"
$ ansible prod -i inventory -m user -a "name=john state=present"
$ ansible prod -i inventory -m shell -a "id john"

$ ansible prod -i inventory -m user -a "name=john state=absent"
$ ansible prod -i inventory -m shell -a "id john"


Module - ping/shell/user - built modules [Example ansible.builtin.user ]


Privileage required for execute few task - like user addition/deletion, package/software install/remove.

**************** Custom LAB-01:- End here ****************

**************** Custom LAB-02:- Start here ****************
- Now we have some idea about "inventory" and "inventory file"
  Eg: 
  $ vim inventory
    [hostGroup]
     server-name-FQDN 
     server-name-multiple 
  $ ansible hostGroup -m ping -i inventory  ["-i inventory-file]
  
- Now we will understand ansible config file.
  ansible.cfg file 
  [defaults]
  inventory = ./inventory 
  remote_user = devops 

  [privilege_escalation]
   become = True 
   become_method = sudo 
   become_user = root 
   become_ask_pass = False 


- vim playbook-example-01.yaml 
  ---
  - name: My playbook - any description.
    hosts: dev 
	tasks:
	  - name: Task-01
	    # debug: # Old method 
		#   msg: "This is task-01 - Old method using ansible-playbook"
        ansible.builtin.debug: 
		  msg: "This is task-01 - New method via ansible-navigator"

- Now execution:-
Old method:-
 $ ansible-playbook playbook-example-01.yaml --syntax
 $ ansible-playbook playbook-example-01.yaml


New method:-
 $ ansible-navigator run -m stdout playbook-example-01.yaml --syntax --eei aap.lab.example.com/ee-supported-rhel8
 
 $ ansible-navigator run  playbook-example-01.yaml --eei aap.lab.example.com/ee-supported-rhel8
 
 $  ansible-navigator run -m stdout playbook-example-01.yaml -m stdout --eei aap.lab.example.com/ee-supported-rhel8

***************************************************************************************
Unit-1-# Red Hat Ansible Automation Platform 2
-1) AAP 2 as a modular distributed AUtomation Platform:-
   - AAP 2 represent the evalution from "Standalone - ansible-playbook" into a distributed, service-based automation ecosystem.
    * Distributed architecture:- seperate layers for control,execution, content and analytics.
    * Modular service:- Controller, Event driven Controller, private Automation Hub and analytics.
    * Enterprise benefits:- scalability, Secure segmentation, cross-team collaboration.
  
-2) INstallation Methods:-
   - Contaierized
   - RPM (YUM/DNF repo) - We will use this method to deploy AAP 2.
   - OpenShift Operator (Just install operator via CLI/Web COnsole).

-3) AAP 2 core components:-
   - Ansible Core 2.16 
     * Deinfe the YAML automation laguage (play,tasks,roles).
	 * Provide run time logic (loops,conditions, delegation, block-rescue etc).
	 * Supplies core CLIs(ansible, ansible-playbook, ansible-galaxy).
	 
	 ansible.builtin.dnf 
	 ansible.builtin.copy 
	 ansible.builtin.files etc 

   - ANsible Execution Environments (AEEs / EE).
     * Ansible Core + Required COllection + Python deps + System tools.
	 * Red Hat Published EEs (Execution Environment).
	   - ee-minimal-rhel8:latest      (Minimal footprint - Base image for custom build)
	   - ee-supported-rhel8:latest    ( Include command collections and plugins ).

   - Ansible Execution Environment Builder.
     ansible-builder create custom images using below files:
      Dependencies:-
      - galaxy - requirements.yml 
      - python - requirements.txt 
      - system - bindep.txt
	  
	  $ sudo dnf install ansible-builder
	  $ ansible-builder build -t ee-custom:rhel9 
	
	- ansible content Navigator (ansible-navigator).
	  * Execute ansible playbook [ansible-navigator run ]
	  * Inventory inspection  [ansible-navigator images]
	  * ansible-navigator generally seperate "ANsible Execution Environment and Ansible COntrol node".
	 
	- Unified User Interface & Enterprise INtegration:-
	   - Automation Controller - run jobs/workflows
	   - Event-Driven ANsible COntroller 
	   - Private automation hub 
	   - Ansible analytics - insight dashboards.
	   
 SUmmary flow:-
 Ansible Core -> EE (Pre-Built or Custom via Builder)
 Ansible Core -> ansible-navigator (RUN and test)
 ANsible COre -> ANsible Controller & unified UI.

- Managing Ansible Project Materials Using Git:-
 Working Tree (git add file) -> Staging Area (git commit) -> "Local repository" -> "remote repository"
 
- Main point for git w.r.t AAPv25:- To provide version-controlled, collabocative lifecycle management for playbooks,roles and intenteries.

- Every changes is tracable via commit (commit ID) -> integrity & auditability for enterprise automation.
- AAP controller integrated directly with Git Project it pulls playbooks duing job launches.
  Web UI (Project -> Job template deployment).
- Project layout:-
project/
 - inventories/
 - roles/
 - playbooks/
 - collections/
 - ansible.cfg 
 - ansible-navigator.yaml 

- Git configuration:-
  $ git config --global user.name 'Chandra Prakash'
  $ git config --global user.email cprakash@host.example.com 
  $ git config --global push.default simple
  $ git config -l
  
 
git clone - git int  
 DO modification:-
 git add .
 git commit -m update 
 git push 
 
 
---------------
Variables:-
 define within Playbook (vars:)
 define variable in sperate myvar.yaml file and source to main playbook.
 group_vars 
 host_vars 
 
 
	



 